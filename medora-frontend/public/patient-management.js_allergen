/**
 * Patient Management Module
 * Manages patient data, selection, and interactions in the Medora system.
 */

// Initialize global namespace for patient management
window.patientManagement = window.patientManagement || {
    currentPatientId: null,
    activeVisitId: null,
    currentPatientData: null
};

// Global variables and state
let currentPatientId = null;
let selectedPatient = null;
let activePlanSections = [];
let activeVisitId = null;
let lastVisit = null;
let currentVisit = null;

/**
 * Initialize user data from the current email
 */
function initializeUserData() {
    const currentEmail = window.currentEmail || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
    
    window.currentEmail = currentEmail;
    window.currentTenantId = currentEmail; // Using email as tenant ID
    window.currentRole = null; // Role can be set later if needed
    
    console.log("Initialized user data from window.currentEmail:", {
        currentEmail: window.currentEmail,
        currentTenantId: window.currentTenantId,
        currentRole: window.currentRole
    });
    
    return {
        currentEmail: window.currentEmail,
        currentTenantId: window.currentTenantId,
        currentRole: window.currentRole
    };
}

/**
 * Fetch patients from the API
 * @returns {Promise<Array>} List of patients
 */
async function fetchPatients() {
    try {
        // Show loading indicator
        showSpinner();
        
        const tenantId = window.currentTenantId || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        console.log("Fetching patients for tenant:", tenantId);
        
        // Check if tenantId is different from email, update for GSI compatibility
        let queryTenantId = tenantId;
        if (tenantId === 'default_tenant' && window.currentEmail) {
            queryTenantId = window.currentEmail;
            console.log("TenantID doesn't match email, updating for GSI compatibility:", {
                oldTenantId: tenantId,
                newTenantId: queryTenantId
            });
        }
        
        // Make API call to get patients
        const apiUrl = `/api/get-patients?tenantId=${encodeURIComponent(queryTenantId)}`;
        console.log("API call to match DynamoDB GSI query:", apiUrl);
        
        const response = await fetch(apiUrl);
        const data = await response.json();
        
        console.log("Patient data received from API:", data);
        
        if (!data.success) {
            console.error("Error fetching patients:", data.error);
            hideSpinner();
            return [];
        }
        
        // Update the patient list in the UI
        updatePatientList(data.patients);
        
        // Hide loading indicator
        hideSpinner();
        
        // Auto-select first patient if configured
        const selectedPatientId = getDefaultSelectedPatient(data.patients);
        if (selectedPatientId) {
            console.log("Auto-selecting patient:", selectedPatientId);
            
            // Make sure these variables are globally accessible
            window.currentPatientId = selectedPatientId;
            window.patientManagement.currentPatientId = selectedPatientId;
            
            // Select the patient
            selectPatient(selectedPatientId);
            
            // Trigger event for other modules
            const patientSelectedEvent = new CustomEvent('patientSelected', { 
                detail: { patientId: selectedPatientId } 
            });
            document.dispatchEvent(patientSelectedEvent);
        }
        
        return data.patients;
    } catch (error) {
        console.error("Error fetching patients:", error);
        hideSpinner();
        return [];
    }
}

/**
 * Get the default patient to select on page load
 * @param {Array} patients - List of patients
 * @returns {string|null} Patient ID to select, or null
 */
function getDefaultSelectedPatient(patients) {
    if (!patients || patients.length === 0) {
        return null;
    }
    
    // Check if there's a patient ID in the URL
    const urlParams = new URLSearchParams(window.location.search);
    const patientIdFromUrl = urlParams.get('patientId');
    if (patientIdFromUrl) {
        // Verify that the patient exists
        const patientExists = patients.some(p => p.patientId === patientIdFromUrl);
        if (patientExists) {
            return patientIdFromUrl;
        }
    }
    
    // Default to the first patient in the list
    return patients[0].patientId;
}

/**
 * Update the patient list in the UI
 * @param {Array} patients - List of patients
 */
function updatePatientList(patients) {
    console.log("Updating patient list...");
    
    const patientList = document.getElementById('patient-list');
    if (!patientList) {
        console.error("Patient list element not found");
        return;
    }
    
    // Clear existing list
    patientList.innerHTML = '';
    
    // Add patients to the list
    patients.forEach(patient => {
        // Format date for display
        const createdAt = new Date(patient.createdAt);
        const formattedDate = createdAt.toLocaleString('en-US', {
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false,
            timeZoneName: 'short'
        });
        
        console.log(`[DEBUG] Rendering patient ${patient.name}: createdAt=${patient.createdAt}, formatted=${formattedDate}`);
        
        // Create patient item element
        const patientItem = document.createElement('div');
        patientItem.className = 'patient-item';
        patientItem.innerHTML = `
            <div class="patient-name">${patient.name}</div>
            <div class="patient-date">${formattedDate}</div>
            <button class="delete-btn" data-patient-id="${patient.patientId}">Ã—</button>
        `;
        
        // Add click event to select the patient
        patientItem.addEventListener('click', function(e) {
            // Don't select if clicking the delete button
            if (e.target.classList.contains('delete-btn')) {
                return;
            }
            
            // Remove active class from all patient items
            document.querySelectorAll('.patient-item').forEach(item => {
                item.classList.remove('active');
            });
            
            // Add active class to this item
            patientItem.classList.add('active');
            
            // Select the patient
            selectPatient(patient.patientId);
        });
        
        // Add click event to delete button
        const deleteBtn = patientItem.querySelector('.delete-btn');
        deleteBtn.addEventListener('click', function(e) {
            e.stopPropagation(); // Prevent patient selection
            
            // Confirm deletion
            if (confirm(`Are you sure you want to delete patient ${patient.name}?`)) {
                deletePatient(patient.patientId);
            }
        });
        
        // Add to list
        patientList.appendChild(patientItem);
    });
    
    console.log(`Patient list updated with ${patients.length} patients`);
}

/**
 * Delete a patient
 * @param {string} patientId - ID of the patient to delete
 */
async function deletePatient(patientId) {
    try {
        const tenantId = window.currentTenantId || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        const email = window.currentEmail || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        
        const response = await fetch('/api/delete-patient', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                patientId,
                tenantId,
                email
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Refresh the patient list
            fetchPatients();
            
            // Clear patient details if this was the selected patient
            if (currentPatientId === patientId) {
                clearPatientDetails();
            }
        } else {
            alert(`Error deleting patient: ${data.error}`);
        }
    } catch (error) {
        console.error("Error deleting patient:", error);
        alert("An error occurred while deleting the patient. Please try again.");
    }
}

/**
 * Clear patient details when no patient is selected
 */
function clearPatientDetails() {
    const patientDetails = document.getElementById('patient-details');
    if (patientDetails) {
        patientDetails.innerHTML = '<div class="empty-state">Select a patient to view details</div>';
    }
    
    // Clear global variables
    currentPatientId = null;
    selectedPatient = null;
    window.currentPatientId = null;
    window.patientManagement.currentPatientId = null;
    activeVisitId = null;
    window.activeVisitId = null;
    window.patientManagement.activeVisitId = null;
}

/**
 * Select a patient and display their details
 * @param {string} patientId - ID of the patient to select
 */
async function selectPatient(patientId) {
    try {
        console.log("Before setting patient in selectPatient: currentPatientId:", window.currentPatientId);
        
        // Set patient ID on window and in our namespace
        window.currentPatientId = patientId;
        window.patientManagement.currentPatientId = patientId;
        currentPatientId = patientId;
        
        // Show loading indicator
        showContentSpinner();
        
        // Fetch patient data from the patients list
        const patientItem = document.querySelector(`.delete-btn[data-patient-id="${patientId}"]`).closest('.patient-item');
        const patientName = patientItem.querySelector('.patient-name').textContent;
        
        // Fetch patient details including medical history
        const tenantId = window.currentTenantId || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        
        // Make API call to get patient history
        const apiUrl = `/api/get-patient-history?tenantId=${encodeURIComponent(tenantId)}&patientId=${patientId}`;
        console.log("Fetching patient history using tenantID for GSI:", apiUrl);
        
        const response = await fetch(apiUrl);
        const data = await response.json();
        
        console.log("Patient history response:", data);
        
        if (!data.success) {
            console.error("Error fetching patient history:", data.error);
            hideContentSpinner();
            return;
        }
        
        // Process and display patient data
        const patientData = {
            patientId,
            name: patientName,
            age: null, // Can be updated if available
            medicalHistory: null, // Can be updated if available
            tenantId
        };
        
        // Save current patient data
        selectedPatient = patientData;
        window.patientManagement.currentPatientData = patientData;
        
        // Update patient details UI
        updatePatientDetailsUI(patientData, data.transcripts);
        
        // Set active visit ID if available
        if (data.transcripts && data.transcripts.length > 0) {
            // Sort transcripts by creation date (newest first)
            const sortedTranscripts = [...data.transcripts].sort((a, b) => 
                new Date(b.createdAt) - new Date(a.createdAt)
            );
            
            // Set active visit ID to the most recent transcript
            const visitId = sortedTranscripts[0].id;
            activeVisitId = visitId;
            
            // Set on window and in namespace
            window.activeVisitId = visitId;
            window.patientManagement.activeVisitId = visitId;
            
            console.log("Set activeVisitId in selectPatient:", visitId);
        }
        
        console.log("After setting patient in selectPatient: currentPatientId:", window.currentPatientId);
        console.log("Selected patient:", patientData);
        
        // Trigger custom event for other modules
        const patientSelectedEvent = new CustomEvent('patientSelected', { 
            detail: { 
                patientId, 
                visitId: activeVisitId, 
                patientData 
            } 
        });
        document.dispatchEvent(patientSelectedEvent);
        
        // Hide loading indicator
        hideContentSpinner();
        
        // Return the patient data
        return patientData;
    } catch (error) {
        console.error("Error in selectPatient:", error);
        hideContentSpinner();
        return null;
    }
}

/**
 * Update the patient details UI
 * @param {Object} patient - Patient data
 * @param {Array} transcripts - Patient transcripts
 */
function updatePatientDetailsUI(patient, transcripts) {
    const patientDetails = document.getElementById('patient-details');
    if (!patientDetails) {
        console.error("Patient details element not found");
        return;
    }
    
    // Determine last visit and current visit dates
    let lastVisitDate = null;
    let currentVisitDate = null;
    
    if (transcripts && transcripts.length > 0) {
        // Sort transcripts by creation date (newest first)
        const sortedTranscripts = [...transcripts].sort((a, b) => 
            new Date(b.createdAt) - new Date(a.createdAt)
        );
        
        currentVisitDate = new Date(sortedTranscripts[0].createdAt);
        if (sortedTranscripts.length > 1) {
            lastVisitDate = new Date(sortedTranscripts[1].createdAt);
        }
    }
    
    // Format dates for display
    const formatVisitDate = (date) => {
        if (!date) return 'N/A';
        return date.toLocaleString('en-US', {
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: false,
            timeZoneName: 'short'
        });
    };
    
    const lastVisitFormatted = formatVisitDate(lastVisitDate);
    const currentVisitFormatted = formatVisitDate(currentVisitDate);
    
    console.log(`[DEBUG] Rendering patient details for ${patient.name}: lastVisit=${lastVisitDate}, formatted=${lastVisitFormatted}, currentVisit=${currentVisitDate}, formatted=${currentVisitFormatted}`);
    
    // Update patient details HTML
    patientDetails.innerHTML = `
        <h2 id="patient-details-name" data-patient-id="${patient.patientId}">${patient.name}</h2>
        <div class="patient-metadata">
            <div class="metadata-item">
                <span class="metadata-label">Last Visit:</span>
                <span class="metadata-value">${lastVisitFormatted}</span>
            </div>
            <div class="metadata-item">
                <span class="metadata-label">Current Visit:</span>
                <span id="patient-details-current-visit" class="metadata-value" data-visit-id="${activeVisitId || ''}">${currentVisitFormatted}</span>
            </div>
        </div>
        <div class="patient-history">
            <h3>Visit History</h3>
            <div id="visit-history-list" class="visit-history-list"></div>
        </div>
        <div id="patient-plan" class="patient-plan">
            <h3>Treatment Plan</h3>
            <div id="plan-sections" class="plan-sections"></div>
        </div>
    `;
    
    // Add visit history
    const visitHistoryList = document.getElementById('visit-history-list');
    if (visitHistoryList && transcripts && transcripts.length > 0) {
        // Sort by date (newest first)
        const sortedTranscripts = [...transcripts].sort((a, b) => 
            new Date(b.createdAt) - new Date(a.createdAt)
        );
        
        // Add each visit to the list
        sortedTranscripts.forEach(transcript => {
            const visitDate = new Date(transcript.createdAt);
            const formattedDate = formatVisitDate(visitDate);
            
            console.log(`[DEBUG] Rendering visit history entry: createdAt=${transcript.createdAt}, formatted=${formattedDate}`);
            
            const visitItem = document.createElement('div');
            visitItem.className = 'visit-item';
            visitItem.dataset.visitId = transcript.id;
            visitItem.innerHTML = `
                <div class="visit-date">${formattedDate}</div>
                <button class="view-visit-btn">View</button>
            `;
            
            // Add click event to view button
            const viewBtn = visitItem.querySelector('.view-visit-btn');
            viewBtn.addEventListener('click', () => {
                // Set active visit ID
                setActiveVisitId(transcript.id);
                
                // Load visit details and plan
                loadVisitDetails(transcript);
            });
            
            // Add to list
            visitHistoryList.appendChild(visitItem);
        });
        
        // Load most recent visit by default
        if (sortedTranscripts.length > 0) {
            const mostRecentTranscript = sortedTranscripts[0];
            setActiveVisitId(mostRecentTranscript.id);
            loadVisitDetails(mostRecentTranscript);
        }
    }
}

/**
 * Set the active visit ID
 * @param {string} visitId - Visit ID to set as active
 */
function setActiveVisitId(visitId) {
    // Set active visit ID
    activeVisitId = visitId;
    
    // Add these lines to share the active visit ID
    window.activeVisitId = visitId;
    window.patientManagement.activeVisitId = visitId;
    
    console.log("Set activeVisitId in setActiveVisitId:", visitId);
    
    // Update UI to show active visit
    const visitItems = document.querySelectorAll('.visit-item');
    visitItems.forEach(item => {
        if (item.dataset.visitId === visitId) {
            item.classList.add('active');
        } else {
            item.classList.remove('active');
        }
    });
    
    // Update current visit display
    const currentVisitElement = document.getElementById('patient-details-current-visit');
    if (currentVisitElement) {
        currentVisitElement.dataset.visitId = visitId;
    }
}

/**
 * Load visit details and treatment plan
 * @param {Object} transcript - Visit transcript
 */
function loadVisitDetails(transcript) {
    try {
        // Extract plan from transcript
        const planText = transcript.soapNotes?.plan_of_care || 
                        transcript.insights?.recommendations || 
                        "No plan available for this visit.";
        
        console.log("Raw Plan Data (SelectPatient):", JSON.stringify(planText));
        
        // Parse plan sections
        const planSections = parsePlanSections(transcript, planText);
        
        // Render plan sections
        renderPlanSections(planSections);
        
        // Fetch references for this visit if needed
        fetchReferences(currentPatientId, transcript.id);
    } catch (error) {
        console.error("Error loading visit details:", error);
    }
}

/**
 * Parse treatment plan sections
 * @param {Object} transcript - Visit transcript
 * @param {string} planText - Plan text
 * @returns {Array} Parsed plan sections
 */
function parsePlanSections(transcript, planText) {
    try {
        // Try to parse from SOAP notes first
        if (transcript.soapNotes?.plan_of_care) {
            return parsePlanFromSoapNotes(transcript.soapNotes.plan_of_care);
        }
        
        // If not available, try to parse from recommendations
        if (transcript.insights?.recommendations) {
            return parsePlanFromRecommendations(transcript.insights.recommendations);
        }
        
        // Fallback to transcript text
        console.log("Falling back to enhanced NLP-based parsing for transcript");
        console.log("Transcript Text:", transcript.transcript || "");
        
        if (!transcript.transcript) {
            console.log("No transcript text available for NLP parsing");
            return [];
        }
        
        return parsePlanFromTranscript(transcript.transcript);
    } catch (error) {
        console.error("Error parsing plan sections:", error);
        return [];
    }
}

/**
 * Parse plan sections from SOAP notes
 * @param {string} planText - Plan text from SOAP notes
 * @returns {Array} Parsed plan sections
 */
function parsePlanFromSoapNotes(planText) {
    try {
        // Check if the plan is in the "In regards to..." format
        if (planText.includes("In regards to")) {
            return parseInRegardsToFormat(planText);
        }
        
        // Fallback to simple parsing
        return [
            {
                title: "Treatment Plan",
                items: planText.split("\n").filter(line => line.trim().length > 0)
            }
        ];
    } catch (error) {
        console.error("Error parsing plan from SOAP notes:", error);
        return [];
    }
}

/**
 * Parse "In regards to..." format plan
 * @param {string} planText - Plan text
 * @returns {Array} Parsed plan sections
 */
function parseInRegardsToFormat(planText) {
    try {
        // Split into sections by "In regards to..."
        const sectionTexts = planText.split(/In regards to/i);
        
        console.log("Split Plan Sections (SelectPatient):", sectionTexts);
        
        // Process each section (skipping the first empty one)
        const sections = [];
        for (let i = 1; i < sectionTexts.length; i++) {
            const sectionText = sectionTexts[i].trim();
            
            // Extract section title
            const titleMatch = sectionText.match(/^([^:]+):/);
            if (!titleMatch) continue;
            
            const title = titleMatch[1].trim();
            
            // Extract items
            const itemsText = sectionText.substr(titleMatch[0].length).trim();
            const items = itemsText.split(/\n\s*[-â€¢]\s*/)
                .map(item => item.trim())
                .filter(item => item.length > 0);
            
            console.log(`Parsed Section (SelectPatient) - ${title}:`, items);
            
            sections.push({
                title,
                items
            });
        }
        
        console.log("Merged Plan Sections:", sections);
        
        return sections;
    } catch (error) {
        console.error("Error parsing In regards to format:", error);
        return [];
    }
}

/**
 * Parse plan from recommendations
 * @param {string} recommendationsText - Recommendations text
 * @returns {Array} Parsed plan sections
 */
function parsePlanFromRecommendations(recommendationsText) {
    try {
        // Try to parse JSON if recommendationsText is a JSON string
        let recommendations = recommendationsText;
        if (typeof recommendationsText === 'string' && recommendationsText.trim().startsWith('{')) {
            try {
                recommendations = JSON.parse(recommendationsText);
            } catch (e) {
                // Not valid JSON, continue with string parsing
            }
        }
        
        // Handle object format
        if (typeof recommendations === 'object' && recommendations !== null) {
            const sections = [];
            
            // Check for numbered sections like "1. Medication Management"
            const numberedSectionKeys = Object.keys(recommendations).filter(key => 
                /^\d+\.\s+/.test(key)
            );
            
            if (numberedSectionKeys.length > 0) {
                // Process numbered sections
                numberedSectionKeys.forEach(key => {
                    const title = key.replace(/^\d+\.\s+/, '');
                    const content = recommendations[key];
                    
                    // Extract items
                    let items = [];
                    if (typeof content === 'string') {
                        // Split by newlines and bullet points
                        items = content.split(/\n\s*[-â€¢]\s*/)
                            .map(item => item.trim())
                            .filter(item => item.length > 0);
                    } else if (Array.isArray(content)) {
                        items = content;
                    } else if (typeof content === 'object' && content !== null) {
                        // Convert object to array of strings
                        items = Object.entries(content).map(([key, value]) => 
                            `${key}: ${value}`
                        );
                    }
                    
                    sections.push({
                        title,
                        items
                    });
                });
            } else {
                // Process other object formats
                Object.entries(recommendations).forEach(([key, value]) => {
                    const title = key;
                    
                    // Extract items
                    let items = [];
                    if (typeof value === 'string') {
                        // Split by newlines and bullet points
                        items = value.split(/\n\s*[-â€¢]\s*/)
                            .map(item => item.trim())
                            .filter(item => item.length > 0);
                    } else if (Array.isArray(value)) {
                        items = value;
                    } else if (typeof value === 'object' && value !== null) {
                        // Convert object to array of strings
                        items = Object.entries(value).map(([key, value]) => 
                            `${key}: ${value}`
                        );
                    }
                    
                    sections.push({
                        title,
                        items
                    });
                });
            }
            
            return sections;
        }
        
        // If it's a string, try to parse sections like "1. Title:"
        const sectionMatches = recommendationsText.match(/\d+\.\s+[^:]+:/g) || [];
        if (sectionMatches.length > 0) {
            const sections = [];
            
            // Split by section headers
            let lastIndex = 0;
            sectionMatches.forEach((match, index) => {
                const title = match.replace(/\d+\.\s+/, '').replace(':', '');
                const startIndex = recommendationsText.indexOf(match) + match.length;
                const endIndex = index < sectionMatches.length - 1 
                    ? recommendationsText.indexOf(sectionMatches[index + 1]) 
                    : recommendationsText.length;
                
                // Extract section content
                const content = recommendationsText.substring(startIndex, endIndex).trim();
                
                // Extract items
                const items = content.split(/\n\s*[-â€¢]\s*/)
                    .map(item => item.trim())
                    .filter(item => item.length > 0);
                
                sections.push({
                    title,
                    items
                });
                
                lastIndex = endIndex;
            });
            
            return sections;
        }
        
        // Fallback to simple section
        return [
            {
                title: "Recommendations",
                items: recommendationsText.split(/\n\s*[-â€¢]\s*/)
                    .map(item => item.trim())
                    .filter(item => item.length > 0)
            }
        ];
    } catch (error) {
        console.error("Error parsing plan from recommendations:", error);
        return [];
    }
}

/**
 * Parse plan from transcript text
 * @param {string} transcriptText - Transcript text
 * @returns {Array} Parsed plan sections
 */
function parsePlanFromTranscript(transcriptText) {
    // Very basic parsing - look for "plan" or "treatment" sections
    try {
        const lines = transcriptText.split('\n');
        
        // Look for plan section
        let inPlanSection = false;
        let planLines = [];
        
        for (const line of lines) {
            const lowerLine = line.toLowerCase();
            
            // Check for plan section start
            if (lowerLine.includes('plan:') || lowerLine.includes('treatment plan:')) {
                inPlanSection = true;
                continue;
            }
            
            // Check for plan section end
            if (inPlanSection && (lowerLine.includes('follow-up:') || lowerLine.includes('assessment:'))) {
                inPlanSection = false;
                break;
            }
            
            // Collect plan lines
            if (inPlanSection && line.trim().length > 0) {
                planLines.push(line.trim());
            }
        }
        
        // If we found plan lines, return them
        if (planLines.length > 0) {
            return [
                {
                    title: "Treatment Plan",
                    items: planLines
                }
            ];
        }
        
        // Fallback - no plan found
        return [];
    } catch (error) {
        console.error("Error parsing plan from transcript:", error);
        return [];
    }
}

/**
 * Render plan sections in the UI
 * @param {Array} sections - Plan sections to render
 */
function renderPlanSections(sections) {
    const planSectionsContainer = document.getElementById('plan-sections');
    if (!planSectionsContainer) {
        console.error("Plan sections container not found");
        return;
    }
    
    // Clear existing sections
    planSectionsContainer.innerHTML = '';
    
    // Save active sections
    activePlanSections = sections;
    
    // Render each section
    sections.forEach(section => {
        console.log(`Rendering section (SelectPatient): ${section.title} with items:`, section.items);
        
        const sectionElement = document.createElement('div');
        sectionElement.className = 'plan-section';
        
        // Create section header
        const sectionHeader = document.createElement('div');
        sectionHeader.className = 'section-header';
        sectionHeader.innerHTML = `
            <h4>${section.title}</h4>
            <div class="section-actions">
                <button class="copy-section-btn">Copy</button>
                <button class="toggle-section-btn">-</button>
            </div>
        `;
        
        // Create section content
        const sectionContent = document.createElement('div');
        sectionContent.className = 'section-content';
        
        // Add items as a list
        if (section.items && section.items.length > 0) {
            const itemsList = document.createElement('ul');
            section.items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.textContent = item;
                itemsList.appendChild(listItem);
            });
            sectionContent.appendChild(itemsList);
        } else {
            sectionContent.innerHTML = '<p>No items in this section</p>';
        }
        
        // Add event listeners
        const toggleBtn = sectionHeader.querySelector('.toggle-section-btn');
        toggleBtn.addEventListener('click', function() {
            if (this.textContent === '-') {
                this.textContent = '+';
                sectionContent.style.display = 'none';
            } else {
                this.textContent = '-';
                sectionContent.style.display = 'block';
            }
        });
        
        const copyBtn = sectionHeader.querySelector('.copy-section-btn');
        copyBtn.addEventListener('click', function() {
            const textToCopy = section.items.join('\n');
            navigator.clipboard.writeText(textToCopy).then(() => {
                alert('Section copied to clipboard!');
            }).catch(error => {
                console.error('Error copying to clipboard:', error);
                alert('Failed to copy to clipboard');
            });
        });
        
        // Assemble section
        sectionElement.appendChild(sectionHeader);
        sectionElement.appendChild(sectionContent);
        
        // Add to container
        planSectionsContainer.appendChild(sectionElement);
    });
}

/**
 * Fetch references for a patient and visit
 * @param {string} patientId - Patient ID
 * @param {string} visitId - Visit ID
 */
async function fetchReferences(patientId, visitId) {
    try {
        console.log(`Fetching references for patient: ${patientId} visit: ${visitId}`);
        
        // Show loading spinner
        showReferencesSpinner();
        
        // Get current SOAP notes
        const latestAnalysis = await fetchLatestAnalysis(patientId, visitId);
        console.log("Current latestAnalysis state:", latestAnalysis);
        
        // Extract conditions
        const conditions = latestAnalysis?.soapNotes?.differential_diagnosis || '';
        console.log("Conditions extracted for /get-insights:", conditions);
        
        // Fetch references
        const apiUrl = `/get-insights?patient_id=${patientId}&visit_id=${visitId}&conditions=${encodeURIComponent(conditions)}`;
        console.log("Fetching references from:", apiUrl);
        
        const response = await fetch(apiUrl);
        const data = await response.json();
        
        // Process and display references
        if (data && data.insights) {
            console.log("References API response:", data);
            displayReferences(data.insights);
        } else {
            console.error("No insights found in API response");
            hideReferencesSpinner();
        }
    } catch (error) {
        console.error("Error fetching references:", error);
        hideReferencesSpinner();
    }
}

/**
 * Fetch latest analysis for a patient and visit
 * @param {string} patientId - Patient ID
 * @param {string} visitId - Visit ID
 * @returns {Object} Latest analysis data
 */
async function fetchLatestAnalysis(patientId, visitId) {
    try {
        const tenantId = window.currentTenantId || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        
        // Make API call to get patient history
        const apiUrl = `/api/get-patient-history?tenantId=${encodeURIComponent(tenantId)}&patientId=${patientId}`;
        
        const response = await fetch(apiUrl);
        const data = await response.json();
        
        if (!data.success) {
            console.error("Error fetching patient history for analysis:", data.error);
            return null;
        }
        
        // Find the transcript for this visit
        const transcript = data.transcripts.find(t => t.id === visitId);
        if (!transcript) {
            console.error(`Transcript not found for visit ${visitId}`);
            return null;
        }
        
        return transcript;
    } catch (error) {
        console.error("Error fetching latest analysis:", error);
        return null;
    }
}

/**
 * Display references in the UI
 * @param {Array} insights - Insights/references to display
 */
function displayReferences(insights) {
    const referencesContainer = document.getElementById('references-container');
    if (!referencesContainer) {
        console.error("References container not found");
        hideReferencesSpinner();
        return;
    }
    
    // Clear existing references
    referencesContainer.innerHTML = '';
    
    // Render each insight
    insights.forEach((insight, index) => {
        console.log(`Rendering insight #${index + 1}:`, insight);
        
        const insightElement = document.createElement('div');
        insightElement.className = 'reference-item';
        
        // Format confidence marker
        let confidenceClass = '';
        if (insight.confidence === 'Highly Recommended') {
            confidenceClass = 'high-confidence';
        } else if (insight.confidence === 'Recommended') {
            confidenceClass = 'medium-confidence';
        } else {
            confidenceClass = 'low-confidence';
        }
        
        // Create insight content
        insightElement.innerHTML = `
            <div class="reference-header ${confidenceClass}">
                <h4 class="reference-title">${insight.title}</h4>
                <div class="reference-meta">
                    <span class="reference-source">${insight.source} (${insight.year || 'N/A'})</span>
                    <span class="reference-confidence">${insight.confidence}</span>
                </div>
            </div>
            <div class="reference-content">
                <p class="reference-summary">${insight.summary}</p>
                <div class="reference-footer">
                    <div class="reference-authors">${insight.authors || 'Authors not specified'}</div>
                    <a href="${insight.url}" target="_blank" class="reference-link">View Source</a>
                </div>
            </div>
        `;
        
        // Add to container
        referencesContainer.appendChild(insightElement);
    });
    
    console.log("Populated references table with data:", insights);
    
    // Hide loading spinner
    hideReferencesSpinner();
}

/**
 * Show loading spinner for patient list
 */
function showSpinner() {
    const spinner = document.getElementById('patient-list-loading');
    if (spinner) {
        spinner.style.display = 'block';
        console.log("Showing loading text for patient list...");
    } else {
        // Create spinner if it doesn't exist
        const patientList = document.getElementById('patient-list');
        if (patientList) {
            const newSpinner = document.createElement('div');
            newSpinner.id = 'patient-list-loading';
            newSpinner.className = 'loading-text';
            newSpinner.textContent = 'Loading patients...';
            
            patientList.parentNode.insertBefore(newSpinner, patientList);
            console.log("Created and showing loading text for patient list...");
        }
    }
}

/**
 * Hide loading spinner for patient list
 */
function hideSpinner() {
    const spinner = document.getElementById('patient-list-loading');
    if (spinner) {
        spinner.style.display = 'none';
        console.log("Hiding loading text for patient list...");
    } else {
        console.log("Patient list loading text not found; may have been removed or not initialized");
    }
}

/**
 * Show loading spinner for content area
 */
function showContentSpinner() {
    const spinner = document.getElementById('content-loading');
    if (spinner) {
        spinner.style.display = 'block';
        console.log("Showing content loading text...");
    } else {
        // Create spinner if it doesn't exist
        const contentArea = document.getElementById('patient-details');
        if (contentArea) {
            const newSpinner = document.createElement('div');
            newSpinner.id = 'content-loading';
            newSpinner.className = 'loading-text';
            newSpinner.textContent = 'Loading patient details...';
            
            contentArea.parentNode.insertBefore(newSpinner, contentArea);
            console.log("Created and showing content loading text...");
        }
    }
}

/**
 * Hide loading spinner for content area
 */
function hideContentSpinner() {
    const spinner = document.getElementById('content-loading');
    if (spinner) {
        spinner.style.display = 'none';
        console.log("Hiding content loading text...");
    } else {
        console.log("Content loading text not found");
    }
}

/**
 * Show references loading spinner
 */
function showReferencesSpinner() {
    const spinner = document.getElementById('references-spinner');
    if (spinner) {
        spinner.style.display = 'block';
        console.log("Showing references spinner...");
    } else {
        // Create spinner if it doesn't exist
        const referencesContainer = document.getElementById('references-container');
        if (referencesContainer) {
            const newSpinner = document.createElement('div');
            newSpinner.id = 'references-spinner';
            newSpinner.className = 'loading-spinner';
            newSpinner.innerHTML = '<div class="spinner"></div><div>Loading references...</div>';
            
            referencesContainer.parentNode.insertBefore(newSpinner, referencesContainer);
            console.log("Created and showing references spinner...");
        }
    }
    
    // Set timeout to hide spinner after 10 seconds if not hidden already
    setTimeout(() => {
        const spinner = document.getElementById('references-spinner');
        if (spinner && spinner.style.display !== 'none') {
            console.log("References spinner timeout reached, hiding spinner...");
            spinner.style.display = 'none';
        }
    }, 10000);
}

/**
 * Hide references loading spinner
 */
function hideReferencesSpinner() {
    const spinner = document.getElementById('references-spinner');
    if (spinner) {
        spinner.style.display = 'none';
        console.log("Hiding references spinner...");
    } else {
        console.log("References spinner not found");
    }
}

/**
 * Start a new visit for the current patient
 */
async function startVisit() {
    try {
        if (!currentPatientId) {
            alert("Please select a patient first");
            return;
        }
        
        const tenantId = window.currentTenantId || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        const email = window.currentEmail || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        
        // Make API call to start visit
        const response = await fetch('/api/visit/start', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                patientId: currentPatientId,
                tenantId,
                email
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            // Set active visit ID
            setActiveVisitId(data.visitId);
            
            // Show recording UI
            showRecordingUI();
            
            // Refresh patient details
            selectPatient(currentPatientId);
        } else {
            alert(`Error starting visit: ${data.error}`);
        }
    } catch (error) {
        console.error("Error starting visit:", error);
        alert("An error occurred while starting the visit. Please try again.");
    }
}

/**
 * Show recording UI for transcript
 */
function showRecordingUI() {
    const recordingContainer = document.createElement('div');
    recordingContainer.id = 'recording-container';
    recordingContainer.className = 'recording-container';
    recordingContainer.innerHTML = `
        <div class="recording-header">
            <h3>Recording Session</h3>
            <button id="close-recording-btn">Ã—</button>
        </div>
        <div class="recording-controls">
            <button id="start-recording-btn" class="primary-btn">Start Recording</button>
            <button id="stop-recording-btn" class="primary-btn" disabled>Stop Recording</button>
            <div id="recording-status">Ready to record</div>
        </div>
        <div class="transcript-container">
            <h4>Transcript</h4>
            <div id="transcript-text" class="transcript-text" contenteditable="true"></div>
            <div class="transcript-actions">
                <button id="clear-transcript-btn" class="secondary-btn">Clear</button>
                <button id="submit-transcript-btn" class="primary-btn">Submit</button>
            </div>
        </div>
    `;
    
    // Add to page
    const mainContent = document.querySelector('.main-content') || document.body;
    mainContent.appendChild(recordingContainer);
    
    // Add event listeners
    document.getElementById('close-recording-btn').addEventListener('click', () => {
        recordingContainer.remove();
    });
    
    document.getElementById('start-recording-btn').addEventListener('click', startRecording);
    document.getElementById('stop-recording-btn').addEventListener('click', stopRecording);
    document.getElementById('clear-transcript-btn').addEventListener('click', clearTranscript);
    document.getElementById('submit-transcript-btn').addEventListener('click', submitTranscript);
}

/**
 * Start recording audio
 */
function startRecording() {
    // This would normally use the Web Audio API
    // For this implementation, we'll simulate recording
    
    const startBtn = document.getElementById('start-recording-btn');
    const stopBtn = document.getElementById('stop-recording-btn');
    const statusElement = document.getElementById('recording-status');
    
    startBtn.disabled = true;
    stopBtn.disabled = false;
    statusElement.textContent = 'Recording in progress...';
    statusElement.className = 'recording-active';
    
    // In a real implementation, this would start the actual recording
    console.log("Started recording");
}

/**
 * Stop recording audio
 */
function stopRecording() {
    // This would normally stop the Web Audio API recording
    // For this implementation, we'll simulate stopping recording
    
    const startBtn = document.getElementById('start-recording-btn');
    const stopBtn = document.getElementById('stop-recording-btn');
    const statusElement = document.getElementById('recording-status');
    const transcriptElement = document.getElementById('transcript-text');
    
    startBtn.disabled = false;
    stopBtn.disabled = true;
    statusElement.textContent = 'Recording stopped';
    statusElement.className = '';
    
    // Simulate adding transcript text
    const simulatedTranscript = "Doctor: Hello, how are you feeling today?\n\nPatient: I've been having some allergies, lots of sneezing and a runny nose.\n\nDoctor: I see. How long has this been going on?\n\nPatient: About two weeks now. It seems to get worse when I'm outside.";
    
    transcriptElement.textContent = simulatedTranscript;
    
    console.log("Stopped recording");
}

/**
 * Clear transcript text
 */
function clearTranscript() {
    const transcriptElement = document.getElementById('transcript-text');
    transcriptElement.textContent = '';
}

/**
 * Submit transcript for analysis
 */
async function submitTranscript() {
    try {
        const transcriptElement = document.getElementById('transcript-text');
        const transcript = transcriptElement.textContent;
        
        if (!transcript.trim()) {
            alert("Please record or enter a transcript before submitting");
            return;
        }
        
        if (!currentPatientId || !activeVisitId) {
            alert("Patient or visit information is missing");
            return;
        }
        
        // Show loading state
        const submitBtn = document.getElementById('submit-transcript-btn');
        const originalButtonText = submitBtn.textContent;
        submitBtn.textContent = 'Processing...';
        submitBtn.disabled = true;
        
        const tenantId = window.currentTenantId || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        const email = window.currentEmail || localStorage.getItem('clinicianEmail') || 'doctor@allergyaffiliates.com';
        
        // Make API call to analyze transcript
        const response = await fetch('/submit-transcript', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                patient_id: currentPatientId,
                visit_id: activeVisitId,
                transcript,
                tenantId,
                email
            })
        });
        
        const data = await response.json();
        
        // Reset button state
        submitBtn.textContent = originalButtonText;
        submitBtn.disabled = false;
        
        if (data.statusCode === 200) {
            // Close recording UI
            const recordingContainer = document.getElementById('recording-container');
            if (recordingContainer) {
                recordingContainer.remove();
            }
            
            // Refresh patient details
            selectPatient(currentPatientId);
            
            // Show success message
            alert("Transcript processed successfully");
            
            // After successful submission, trigger an event
            const transcriptSubmittedEvent = new CustomEvent('transcriptSubmitted', {
                detail: {
                    patientId: currentPatientId,
                    visitId: activeVisitId
                }
            });
            document.dispatchEvent(transcriptSubmittedEvent);
        } else {
            alert(`Error processing transcript: ${data.error || 'Unknown error'}`);
        }
    } catch (error) {
        console.error("Error in submitTranscript:", error);
        alert("An error occurred while submitting the transcript. Please try again.");
        
        // Reset button state
        const submitBtn = document.getElementById('submit-transcript-btn');
        if (submitBtn) {
            submitBtn.textContent = 'Submit';
            submitBtn.disabled = false;
        }
    }
}

/**
 * Initialize module when DOM is loaded
 */
function initPatientManagement() {
    console.log("DOM loaded, initializing user data...");
    
    // Initialize user data
    let attempts = 0;
    const maxAttempts = 10;
    
    const initUser = async () => {
        if (window.currentEmail) {
            const userData = initializeUserData();
            console.log("User data initialized successfully");
            
            // Initialize the main functionality
            await fetchPatients();
        } else {
            attempts++;
            if (attempts < maxAttempts) {
                console.log(`User data not ready, retrying (${attempts}/${maxAttempts})...`);
                setTimeout(initUser, 500);
            } else {
                console.error("Failed to initialize user data after multiple attempts");
                
                // Try to initialize with default values
                const userData = initializeUserData();
                console.warn("Initialized with default user data");
                
                // Initialize the main functionality
                await fetchPatients();
            }
        }
    };
    
    initUser();
    
    // Add event listener for "Start Visit" button
    const startVisitBtn = document.getElementById('start-visit-btn');
    if (startVisitBtn) {
        startVisitBtn.addEventListener('click', startVisit);
    }
}

// Add CSS styles
function addStyles() {
    const styleElement = document.createElement('style');
    styleElement.textContent = `
        /* Patient management styles */
        #patient-list {
            max-height: 600px;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .patient-item {
            display: flex;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
        }
        
        .patient-item:hover {
            background-color: #f5f5f5;
        }
        
        .patient-item.active {
            background-color: #e6f7ff;
            border-left: 3px solid #1890ff;
        }
        
        .patient-name {
            flex-grow: 1;
            font-weight: 500;
        }
        
        .patient-date {
            color: #888;
            font-size: 0.9em;
            margin-right: 10px;
        }
        
        .delete-btn {
            background: none;
            border: none;
            color: #ff4d4f;
            font-size: 1.2em;
            cursor: pointer;
            padding: 5px;
        }
        
        .delete-btn:hover {
            color: #ff1f1f;
        }
        
        #patient-details {
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        
        .patient-metadata {
            display: flex;
            margin-bottom: 20px;
        }
        
        .metadata-item {
            margin-right: 20px;
        }
        
        .metadata-label {
            font-weight: 500;
            margin-right: 5px;
        }
        
        .visit-history-list {
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #eee;
            border-radius: 5px;
            padding: 10px;
        }
        
        .visit-item {
            display: flex;
            align-items: center;
            padding: 8px;
            border-bottom: 1px solid #eee;
        }
        
        .visit-item.active {
            background-color: #f0f9ff;
        }
        
        .visit-date {
            flex-grow: 1;
        }
        
        .view-visit-btn {
            background-color: #1890ff;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
        }
        
        .plan-section {
            margin-bottom: 15px;
            border: 1px solid #eee;
            border-radius: 5px;
            overflow: hidden;
        }
        
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background-color: #f5f5f5;
            border-bottom: 1px solid #eee;
        }
        
        .section-header h4 {
            margin: 0;
        }
        
        .section-actions {
            display: flex;
            gap: 10px;
        }
        
        .section-actions button {
            background: none;
            border: 1px solid #ddd;
            border-radius: 3px;
            padding: 3px 8px;
            cursor: pointer;
        }
        
        .section-content {
            padding: 10px;
        }
        
        .section-content ul {
            margin: 0;
            padding-left: 20px;
        }
        
        .section-content li {
            margin-bottom: 5px;
        }
        
        .loading-text {
            text-align: center;
            padding: 10px;
            color: #1890ff;
        }
        
        .loading-spinner {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-left: 4px solid #1890ff;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin-bottom: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .reference-item {
            margin-bottom: 15px;
            border: 1px solid #eee;
            border-radius: 5px;
            overflow: hidden;
        }
        
        .reference-header {
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .reference-header.high-confidence {
            background-color: #f6ffed;
            border-left: 3px solid #52c41a;
        }
        
        .reference-header.medium-confidence {
            background-color: #e6f7ff;
            border-left: 3px solid #1890ff;
        }
        
        .reference-header.low-confidence {
            background-color: #fff7e6;
            border-left: 3px solid #fa8c16;
        }
        
        .reference-title {
            margin: 0 0 5px 0;
            font-size: 16px;
        }
        
        .reference-meta {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            color: #888;
        }
        
        .reference-content {
            padding: 10px;
        }
        
        .reference-summary {
            margin-top: 0;
            line-height: 1.5;
        }
        
        .reference-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 10px;
            font-size: 12px;
        }
        
        .reference-authors {
            color: #888;
        }
        
        .reference-link {
            color: #1890ff;
            text-decoration: none;
        }
        
        .recording-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: white;
            border-top: 1px solid #ddd;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
            padding: 15px;
            z-index: 1000;
            max-height: 50vh;
            overflow-y: auto;
        }
        
        .recording-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .recording-header h3 {
            margin: 0;
        }
        
        #close-recording-btn {
            background: none;
            border: none;
            font-size: 1.5em;
            cursor: pointer;
        }
        
        .recording-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        #recording-status {
            margin-left: 10px;
        }
        
        #recording-status.recording-active {
            color: red;
            font-weight: bold;
        }
        
        .transcript-container {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
        }
        
        .transcript-text {
            min-height: 100px;
            max-height: 200px;
            overflow-y: auto;
            border: 1px solid #eee;
            border-radius: 3px;
            padding: 10px;
            margin-bottom: 10px;
            white-space: pre-wrap;
        }
        
        .transcript-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        
        .primary-btn {
            background-color: #1890ff;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 3px;
            cursor: pointer;
        }
        
        .primary-btn:hover {
            background-color: #40a9ff;
        }
        
        .primary-btn:disabled {
            background-color: #d9d9d9;
            cursor: not-allowed;
        }
        
        .secondary-btn {
            background-color: white;
            color: #1890ff;
            border: 1px solid #1890ff;
            padding: 8px 15px;
            border-radius: 3px;
            cursor: pointer;
        }
        
        .secondary-btn:hover {
            background-color: #f0f5ff;
        }
    `;
    
    document.head.appendChild(styleElement);
}

// Add styles when the document is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', addStyles);
} else {
    addStyles();
}

// Initialize module when DOM is loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPatientManagement);
} else {
    initPatientManagement();
}

// Expose functions to global scope
window.selectPatient = selectPatient;
window.fetchPatients = fetchPatients;
window.setActiveVisitId = setActiveVisitId;
window.startVisit = startVisit;
window.submitTranscript = submitTranscript;
