console.log('patient-management.js loaded');

// Fetch patients from backend
async function fetchPatients() {
    console.log('Fetching patients for tenant:', currentTenantId);
    window.showSpinner();
    try {
        // Check if currentTenantId is defined
        if (typeof currentTenantId === 'undefined' || currentTenantId === null) {
            throw new Error('Tenant ID is not defined. Please ensure you are logged in.');
        }
        const response = await fetch(`/api/get-patients?tenantId=${currentTenantId}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        const data = await response.json();
        patients = data.patients || [];
        updatePatientList();
    } catch (error) {
        console.error('Error fetching patients:', error);
        alert('Error fetching patients: ' + error.message);
    } finally {
        window.hideSpinner();
    }
}

// Update patient list in sidebar (sort by createdAt descending)
function updatePatientList() {
    console.log('Updating patient list...');
    const patientList = document.getElementById('patient-list');
    if (!patientList) {
        console.error('Patient list element not found');
        return;
    }
    patientList.innerHTML = '';
    const filter = document.getElementById('patient-filter')?.value || 'all';
    const filteredPatients = patients.filter(patient => {
        if (filter === 'all') return true;
        const visitType = patient.visitType || 'follow-up';
        return filter === 'today' ? visitType === 'today' : visitType === 'follow-up';
    });
    filteredPatients.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    filteredPatients.forEach(patient => {
        const patientItem = document.createElement('div');
        patientItem.className = 'patient-item';
        const initials = patient.name ? patient.name.split(' ').map(word => word[0]).join('').substring(0, 2).toUpperCase() : 'NA';
        const visitType = patient.visitType || 'follow-up';
        const badgeHtml = visitType === 'today' ? `<span class="visit-badge today">Today</span>` : '';
        patientItem.innerHTML = `
            <div class="patient-initials">${initials}</div>
            <div class="patient-info">
                <div class="name">${patient.name || patient.id}${badgeHtml}</div>
                <div class="details">${patient.age ? patient.age + ' years' : 'Age N/A'}, ${patient.medicalHistory || 'No history'}</div>
                <div class="details">Created: ${new Date(patient.createdAt).toLocaleString()}</div>
            </div>
            <button class="delete-btn" data-patient-id="${patient.patientId}">üóëÔ∏è</button>
        `;
        patientItem.querySelector('.patient-info').addEventListener('click', () => selectPatient(patient));
        patientItem.querySelector('.delete-btn').addEventListener('click', () => deletePatient(patient.patientId));
        patientList.appendChild(patientItem);
    });
    console.log('Patient list updated with', filteredPatients.length, 'patients');
}

// Filter patients based on dropdown selection
function filterPatients() {
    updatePatientList();
}

// Show patient list and hide patient details
function showPatientList(preservePatientId = true) {
    console.log('Entering showPatientList, preservePatientId:', preservePatientId);
    const patientDetails = document.getElementById('patient-details');
    const patientList = document.getElementById('patient-list');
    const transcriptSection = document.getElementById('transcript-section');
    if (patientDetails && patientList && transcriptSection) {
        patientDetails.style.display = 'none';
        patientList.style.display = 'block';
        transcriptSection.style.display = 'block';

        // Add these lines to expand sidebar
        document.getElementById('patient-sidebar').classList.remove('collapsed');
        document.querySelector('.container').classList.remove('patient-view');

        // Hide patient details
        document.getElementById('patient-details').style.display = 'none';

        // Force a reflow
        window.setTimeout(function() {
            window.dispatchEvent(new Event('resize'));
        }, 50);

        // Only reset patient state if preservePatientId is false
        if (!preservePatientId) {
            console.log('Resetting patient state: currentPatientId before reset:', currentPatientId);
            currentPatientId = null;
            currentPatient = null;
            console.log('Resetting patient state: currentPatientId after reset:', currentPatientId);
        } else {
            console.log('Preserving patient state: currentPatientId:', currentPatientId);
        }

        // Reset button states and transcript input
        const startVisitBtn = document.getElementById('start-visit-btn');
        const submitTranscriptBtn = document.getElementById('submit-transcript-btn');
        const startListeningBtn = document.getElementById('start-listening-btn');
        const stopListeningBtn = document.getElementById('stop-listening-btn');
        const transcriptInput = document.getElementById('transcript-input');
        if (startVisitBtn && submitTranscriptBtn && startListeningBtn && stopListeningBtn && transcriptInput) {
            startVisitBtn.disabled = false;
            startVisitBtn.classList.remove('disabled', 'btn-active', 'blink');
            submitTranscriptBtn.disabled = true;
            submitTranscriptBtn.classList.add('disabled');
            submitTranscriptBtn.classList.remove('blink');
            startListeningBtn.disabled = false; // Enable Start Listening
            startListeningBtn.classList.remove('disabled');
            stopListeningBtn.disabled = true; // Disable Stop Listening initially
            stopListeningBtn.classList.add('disabled');
            // Clear the transcript input for a fresh start
            transcriptInput.value = '';
            console.log('Cleared transcript input for new visit, current value:', transcriptInput.value);
            // Reset the transcript state in script-transcript.js
            if (typeof window.resetTranscript === 'function') {
                window.resetTranscript();
                console.log('Called resetTranscript to clear speech recognition state');
            } else {
                console.error('resetTranscript function not found');
            }
            console.log('Buttons reset in showPatientList:', {
                startVisitBtn: { disabled: startVisitBtn.disabled, classList: startVisitBtn.classList.toString() },
                submitTranscriptBtn: { disabled: submitTranscriptBtn.disabled, classList: submitTranscriptBtn.classList.toString() },
                startListeningBtn: { disabled: startListeningBtn.disabled, classList: startListeningBtn.classList.toString() },
                stopListeningBtn: { disabled: stopListeningBtn.disabled, classList: stopListeningBtn.classList.toString() }
            });
        } else {
            console.error('Required elements not found in showPatientList:', {
                startVisitBtn: !!startVisitBtn,
                submitTranscriptBtn: !!submitTranscriptBtn,
                startListeningBtn: !!startListeningBtn,
                stopListeningBtn: !!stopListeningBtn,
                transcriptInput: !!transcriptInput
            });
        }

        // Clear SOAP notes section
        const subjectiveContent = document.getElementById('subjective-content');
        const objectiveContent = document.getElementById('objective-content');
        const assessmentContent = document.getElementById('assessment-content');
        const planContainer = document.getElementById('plan-content-container');
        if (subjectiveContent) subjectiveContent.innerHTML = '';
        if (objectiveContent) objectiveContent.innerHTML = '';
        if (assessmentContent) assessmentContent.innerHTML = '';
        if (planContainer) planContainer.innerHTML = '';

        // Clear AI Insights and References
        const insightsAllergyTriggers = document.getElementById('insights-allergy-triggers');
        const insightsCondition = document.getElementById('insights-condition');
        const insightsRecommendations = document.getElementById('insights-recommendations');
        const referencesTableBody = document.getElementById('references-table-body');
        if (insightsAllergyTriggers) insightsAllergyTriggers.innerHTML = '<p>N/A</p>';
        if (insightsCondition) insightsCondition.innerHTML = '<p>N/A</p>';
        if (insightsRecommendations) {
            insightsRecommendations.innerHTML = '<p>N/A</p>';
            insightsRecommendations.classList.add('bulleted');
        }
        if (referencesTableBody) referencesTableBody.innerHTML = '';

        // Ensure SOAP notes section is visible (will show as empty until a transcript is submitted)
        const notesSection = document.getElementById('notes-section');
        if (notesSection) notesSection.style.display = 'block';

        // Ensure references spinner is hidden since no patient is selected
        window.hideReferencesSpinner();
    } else {
        console.error('Required elements not found:', {
            patientDetails: !!patientDetails,
            patientList: !!patientList,
            transcriptSection: !!transcriptSection
        });
    }
}

// Open template selection modal
function openTemplateSelectionModal(callback) {
    const modal = document.createElement('div');
    modal.id = 'template-selection-modal';
    modal.style.position = 'fixed';
    modal.style.top = '50%';
    modal.style.left = '50%';
    modal.style.transform = 'translate(-50%, -50%)';
    modal.style.background = '#fff';
    modal.style.padding = '20px';
    modal.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
    modal.style.zIndex = '1000';
    modal.style.borderRadius = '8px';
    modal.innerHTML = `
        <h3>Select a Template</h3>
        <select id="template-select">
            ${templates.map(template => `<option value="${template.name}">${template.name} (${template.category})</option>`).join('')}
        </select>
        <button id="select-template-btn" style="margin-top: 10px; padding: 8px 16px; background: #4caf50; color: #fff; border: none; border-radius: 4px; cursor: pointer;">Select</button>
        <button id="cancel-template-btn" style="margin-top: 10px; margin-left: 10px; padding: 8px 16px; background: #e63946; color: #fff; border: none; border-radius: 4px; cursor: pointer;">Cancel</button>
    `;
    document.body.appendChild(modal);

    document.getElementById('select-template-btn').addEventListener('click', () => {
        const selectedTemplateName = document.getElementById('template-select').value;
        currentTemplate = templates.find(template => template.name === selectedTemplateName);
        document.body.removeChild(modal);
        callback();
    });

    document.getElementById('cancel-template-btn').addEventListener('click', () => {
        document.body.removeChild(modal);
        alert('Template selection canceled. Please select a template to start a visit.');
    });
}

// Start a visit
async function startVisit() {
    console.log('Starting visit...');
    console.log('Before starting visit: currentPatientId:', currentPatientId);
    const patientIdInput = document.getElementById('patient-id');
    const patientId = patientIdInput?.value.trim();
    if (!patientId) {
        alert('Please enter a patient name or ID.');
        return;
    }
    // Additional checks for global variables
    if (typeof currentEmail === 'undefined' || currentEmail === null) {
        alert('Current email is not defined. Please ensure you are logged in.');
        return;
    }
    if (typeof currentTenantId === 'undefined' || currentTenantId === null) {
        alert('Tenant ID is not defined. Please ensure you are logged in.');
        return;
    }
    if (typeof templates === 'undefined' || !Array.isArray(templates)) {
        alert('Templates are not defined. Please ensure the application is properly initialized.');
        return;
    }

    // Check for default template
    const defaultTemplate = templates.find(template => template.isDefault);
    if (defaultTemplate) {
        currentTemplate = defaultTemplate;
        console.log('Using default template:', currentTemplate.name);
        await proceedWithVisit(patientId);
    } else {
        console.log('No default template found, prompting for selection');
        openTemplateSelectionModal(() => proceedWithVisit(patientId));
    }
}

// Proceed with visit after template selection
async function proceedWithVisit(patientId) {
    if (!currentTemplate) {
        alert('No template selected. Please select a template to start a visit.');
        return;
    }

    console.log('Starting visit for patient:', patientId, 'with email:', currentEmail, 'and tenantId:', currentTenantId, 'using template:', currentTemplate.name);
    console.log('Before API call: currentPatientId:', currentPatientId);
    window.showSpinner();
    try {
        const response = await fetch('/api/visit/start', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ patientId, email: currentEmail, tenantId: currentTenantId })
        });
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        const result = await response.json();
        console.log('API response from /api/visit/start:', result);
        if (response.ok && result.success) {
            activeVisitId = result.visitId;
            currentPatientId = result.patientId;
            console.log('Set currentPatientId after visit start:', currentPatientId);
            alert(`Visit started for ${result.patientId} with template ${currentTemplate.name}!`);
            const patientIdInput = document.getElementById('patient-id');
            if (patientIdInput) patientIdInput.value = '';
            const startVisitBtn = document.getElementById('start-visit-btn');
            const submitTranscriptBtn = document.getElementById('submit-transcript-btn');
            const startListeningBtn = document.getElementById('start-listening-btn');
            const stopListeningBtn = document.getElementById('stop-listening-btn');
            console.log('DOM elements found in proceedWithVisit:', {
                startVisitBtn: !!startVisitBtn,
                submitTranscriptBtn: !!submitTranscriptBtn,
                startListeningBtn: !!startListeningBtn,
                stopListeningBtn: !!stopListeningBtn
            });
            if (startVisitBtn && submitTranscriptBtn && startListeningBtn && stopListeningBtn) {
                startVisitBtn.disabled = true;
                startVisitBtn.classList.add('disabled');
                startVisitBtn.classList.remove('blink');
                submitTranscriptBtn.disabled = false;
                submitTranscriptBtn.classList.remove('disabled');
                submitTranscriptBtn.classList.add('blink');
                submitTranscriptBtn.focus();
                startListeningBtn.disabled = false;
                startListeningBtn.classList.remove('disabled');
                // Force a recheck of the button's state
                startListeningBtn.removeAttribute('disabled');
                startListeningBtn.classList.remove('disabled');
                startListeningBtn.style.pointerEvents = 'auto'; // Ensure the button is clickable
                startListeningBtn.style.opacity = '1'; // Ensure the button is fully visible
                console.log('Start Listening button enabled:', {
                    disabled: startListeningBtn.disabled,
                    classList: startListeningBtn.classList.toString(),
                    pointerEvents: startListeningBtn.style.pointerEvents,
                    opacity: startListeningBtn.style.opacity
                });
            } else {
                console.error('Failed to find buttons in proceedWithVisit:', {
                    startVisitBtn: !!startVisitBtn,
                    submitTranscriptBtn: !!submitTranscriptBtn,
                    startListeningBtn: !!startListeningBtn,
                    stopListeningBtn: !!stopListeningBtn
                });
            }
            // Ensure fetchPatients completes before proceeding
            await fetchPatients();
            console.log('Updated patients list after fetch:', patients);
            const newPatient = patients.find(p => p.patientId === currentPatientId);
            if (newPatient) {
                console.log('Selecting new patient:', newPatient);
                await selectPatient(newPatient);
                // Automatically start speech recognition after patient is added
                if (typeof window.startSpeechRecognition === 'function') {
                    console.log('Automatically starting speech recognition...');
                    window.startSpeechRecognition();
                } else {
                    console.error('startSpeechRecognition function not defined, cannot auto-start speech recognition');
                    alert('Speech recognition is unavailable. Please click "Start Listening" manually or refresh the page.');
                }
            } else {
                console.error('New patient not found in updated list:', currentPatientId);
                alert('Visit started, but patient not found in list. Please refresh the page.');
            }
        } else {
            console.error('API error:', result.error);
            alert('Error: ' + (result.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('Error starting visit:', error);
        alert('Failed to start visit: ' + error.message);
    } finally {
        window.hideSpinner();
    }
}

// Select a patient
async function selectPatient(patient) {
    console.log('Before setting patient in selectPatient: currentPatientId:', currentPatientId);
    currentPatientId = patient.patientId;
    currentPatient = patient;
    console.log('After setting patient in selectPatient: currentPatientId:', currentPatientId);
    console.log('Selected patient:', JSON.stringify(patient, null, 2));

    // Show patient details and hide patient list
    const patientDetails = document.getElementById('patient-details');
    const patientList = document.getElementById('patient-list');
    const transcriptSection = document.getElementById('transcript-section');
    if (patientDetails && patientList && transcriptSection) {
        patientDetails.style.display = 'block';
        patientList.style.display = 'none';
        transcriptSection.style.display = 'block';

        // Add these lines to fully collapse sidebar
        document.getElementById('patient-sidebar').classList.add('collapsed');
        document.querySelector('.container').classList.add('patient-view');

        // Show patient details
        document.getElementById('patient-details').style.display = 'block';

        // Force a reflow to ensure the layout updates
        window.setTimeout(function() {
            window.dispatchEvent(new Event('resize'));
        }, 50);

        // Populate patient details
        const nameEl = document.getElementById('patient-details-name');
        const mrnEl = document.getElementById('patient-details-mrn');
        const lastVisitEl = document.getElementById('patient-details-last-visit');
        const currentVisitEl = document.getElementById('patient-details-current-visit');
        const visitHistoryEl = document.getElementById('patient-details-visit-history');

        if (nameEl) nameEl.textContent = patient.name || 'N/A';
        if (mrnEl) mrnEl.textContent = patient.mrn || 'N/A';
        if (lastVisitEl) lastVisitEl.textContent = patient.lastVisit || 'N/A';
        if (currentVisitEl) currentVisitEl.textContent = patient.currentVisit || 'N/A';
        if (visitHistoryEl) visitHistoryEl.innerHTML = '<div>No visit history available.</div>'; // Removed mock data
    }

    window.showContentSpinner();
    try {
        const response = await fetch(`/api/get-patient-history?tenantId=${currentTenantId}&patientId=${currentPatientId}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' }
        });
        if (!response.ok) throw new Error('Failed to fetch patient history');
        const data = await response.json();
        console.log('Patient history response:', JSON.stringify(data, null, 2));
        // Check if the response has transcripts; if not, display a message
        if (!data.transcripts || data.transcripts.length === 0) {
            console.log('No transcripts found for patient:', currentPatientId);
            const notesSection = document.getElementById('notes-section');
            const subjectiveContent = document.getElementById('subjective-content');
            const objectiveContent = document.getElementById('objective-content');
            const assessmentContent = document.getElementById('assessment-content');
            const planContainer = document.getElementById('plan-content-container');
            const insightsAllergyTriggers = document.getElementById('insights-allergy-triggers');
            const insightsCondition = document.getElementById('insights-condition');
            const insightsRecommendations = document.getElementById('insights-recommendations');

            if (subjectiveContent) subjectiveContent.innerHTML = '<p>No patient history available. Submit a transcript to generate SOAP notes.</p>';
            if (objectiveContent) objectiveContent.innerHTML = '<p>Awaiting transcript submission.</p>';
            if (assessmentContent) assessmentContent.innerHTML = '<p>Awaiting transcript submission.</p>';
            if (planContainer) planContainer.innerHTML = '<p>Awaiting transcript submission.</p>';
            if (insightsAllergyTriggers) insightsAllergyTriggers.innerHTML = '<p>N/A</p>';
            if (insightsCondition) insightsCondition.innerHTML = '<p>N/A</p>';
            if (insightsRecommendations) {
                insightsRecommendations.innerHTML = '<p>N/A</p>';
                insightsRecommendations.classList.add('bulleted');
            }

            if (notesSection) {
                notesSection.style.display = 'block';
                // Force UI refresh
                console.log('Forcing UI refresh for no transcripts...');
                notesSection.style.display = 'none'; // Briefly hide
                setTimeout(() => {
                    notesSection.style.display = 'block'; // Show again to force re-render
                    window.dispatchEvent(new Event('resize'));
                }, 50);
            }
            window.hideContentSpinner();
            return;
        }
        data.transcripts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        data.transcripts.forEach(transcript => {
            if (transcript.soapNotes) {
                latestAnalysis = { soapNotes: transcript.soapNotes, insights: transcript.insights || {} };
                const subjectiveContent = document.getElementById('subjective-content');
                if (subjectiveContent) {
                    const chiefComplaint = transcript.soapNotes.patient_history?.chief_complaint || 'Not specified';
                    const historyOfPresentIllness = transcript.soapNotes.patient_history?.history_of_present_illness || 'Not specified';
                    const pastMedicalHistory = transcript.soapNotes.patient_history?.past_medical_history || 'Not specified';
                    const allergies = transcript.soapNotes.patient_history?.allergies || 'Not specified';
                    const socialHistory = transcript.soapNotes.patient_history?.social_history || 'Not specified';
                    const reviewOfSystems = transcript.soapNotes.patient_history?.review_of_systems || 'Not specified';
                    subjectiveContent.innerHTML = `
                        <strong>Chief Complaint:</strong><br>
                        The patient presents with ${chiefComplaint.toLowerCase()}.<br><br>
                        <strong>History of Present Illness:</strong><br>
                        ${historyOfPresentIllness}. The symptoms have persisted, affecting the patient's daily activities and quality of life. The patient reports the onset and progression of symptoms, including any triggering factors, duration, and associated complaints.<br><br>
                        <strong>Past Medical History:</strong><br>
                        The patient's medical history includes ${pastMedicalHistory.toLowerCase()}. They have a history of managing these conditions, with varying degrees of control and past interventions noted.<br><br>
                        <strong>Allergies:</strong><br>
                        ${allergies}. The patient confirms any known allergic reactions and their severity, which may influence treatment plans.<br><br>
                        <strong>Social History:</strong><br>
                        ${socialHistory}. The patient reports lifestyle factors that may contribute to their condition, including occupational, environmental, and social determinants of health.<br><br>
                        <strong>Review of Systems:</strong><br>
                        ${reviewOfSystems}. Additional symptoms may be present, impacting multiple systems, and are noted for a comprehensive understanding of the patient's health status.
                    `;
                }
                const objectiveContent = document.getElementById('objective-content');
                if (objectiveContent) {
                    const physicalExamination = transcript.soapNotes.physical_examination || 'Not specified';
                    objectiveContent.innerHTML = `
                        <strong>Physical Examination:</strong><br>
                        ${physicalExamination}. Vital signs include blood pressure, heart rate, respiratory rate, and temperature. Physical findings indicate the patient's current health status, with specific attention to respiratory, cardiovascular, ENT, and general appearance. Additional observations include skin condition, neurological status, and musculoskeletal findings.
                    `;
                }
                const assessmentContent = document.getElementById('assessment-content');
                if (assessmentContent) {
                    let assessmentText = transcript.soapNotes.differential_diagnosis || 'Not specified';
                    assessmentText = assessmentText.replace(/\*/g, '<br>*');
                    assessmentContent.innerHTML = `
                        ${assessmentText}<br><br>
                        The assessment considers the patient's symptoms, history, and physical findings to determine potential diagnoses and contributing factors. Differential diagnoses are prioritized based on clinical presentation, with recommendations for further evaluation to confirm the primary diagnosis.
                    `;
                }
                const planContainer = document.getElementById('plan-content-container');
                if (planContainer) {
                    const planText = transcript.soapNotes.plan_of_care || '';
                    console.log('Raw Plan of Care Data (SelectPatient):', JSON.stringify(planText));
                    let planSections = [];
                    if (!planText) {
                        console.log('Plan of Care is empty (SelectPatient)');
                        planSections = [{
                            title: "General Plan",
                            items: ['No specific plan recommendations available. Please follow up with standard care protocols.']
                        }];
                    } else {
                        const sections = planText.split(/(?=In regards to\s+[\w\s]+:)/i).filter(section => section.trim());
                        console.log('Split Plan Sections (SelectPatient):', sections);
                        sections.forEach(section => {
                            const sectionMatch = section.match(/In regards to\s+(.+?)(?::|$)/i);
                            if (sectionMatch) {
                                const title = sectionMatch[1].trim();
                                const items = section.replace(/In regards to\s+.+?(?::|$)/i, '').trim().split('\n').filter(item => item.trim()).map(item => item.replace(/^- /, ''));
                                console.log(`Parsed Section (SelectPatient) - ${title}:`, items);
                                if (items.length > 0) {
                                    planSections.push({ title, items });
                                }
                            }
                        });
                        if (planSections.length === 0 && planText.trim()) {
                            console.log('No "In regards to" sections found (SelectPatient), treating planText as a single section');
                            const items = planText.split(/[\n‚Ä¢-]/).filter(item => item.trim()).map(item => item.trim());
                            planSections = [{ title: "General Plan", items }];
                        }
                    }
                    if (planSections.length === 0) {
                        console.log('No plan sections parsed (SelectPatient), rendering placeholder');
                        planSections = [{ title: "General Plan", items: ['No specific plan recommendations available.'] }];
                    }
                    planContainer.innerHTML = '';
                    planSections.forEach(section => {
                        try {
                            const sectionDiv = document.createElement('div');
                            sectionDiv.className = 'plan-section';
                            const safeTitle = section.title.replace(/[^a-zA-Z0-9-]/g, '-').toLowerCase();
                            sectionDiv.innerHTML = `
                                <h3>In regards to ${section.title}:</h3>
                                <ul id="plan-content-${safeTitle}" data-original-items='${JSON.stringify(section.items)}'>
                                    ${section.items.map(item => `<li>${item.trim()}</li>`).join('')}
                                </ul>
                            `;
                            console.log(`Rendering section (SelectPatient): ${section.title} with items:`, section.items);
                            planContainer.appendChild(sectionDiv);
                        } catch (error) {
                            console.error(`Error rendering section ${section.title} (SelectPatient):`, error);
                        }
                    });
                    planContainer.style.display = 'block';
                } else {
                    console.error('Plan container element not found in DOM (SelectPatient)');
                }
                const insightsAllergyTriggers = document.getElementById('insights-allergy-triggers');
                const insightsCondition = document.getElementById('insights-condition');
                const insightsRecommendations = document.getElementById('insights-recommendations');
                if (insightsAllergyTriggers && insightsCondition && insightsRecommendations) {
                    insightsAllergyTriggers.innerHTML = `<p>${transcript.insights?.allergy_triggers || 'Not specified'}</p>`;
                    insightsCondition.innerHTML = `<p>${transcript.insights?.condition || 'Not specified'}</p>`;
                    const recommendationsItems = (transcript.insights?.recommendations || '').split('\n').filter(item => item.trim());
                    // Initially render as a bulleted list
                    insightsRecommendations.innerHTML = `
                        <ul>
                            ${recommendationsItems.map(item => `<li>${item.trim()}</li>`).join('')}
                        </ul>
                    `;
                    insightsRecommendations.dataset.originalItems = JSON.stringify(recommendationsItems);
                    insightsRecommendations.classList.add('bulleted');
                }
                const notesSection = document.getElementById('notes-section');
                if (notesSection) notesSection.style.display = 'block';
                if (transcript.visitId && transcript.visitId !== 'undefined') {
                    activeVisitId = transcript.visitId;
                    console.log('Set activeVisitId in selectPatient:', activeVisitId);
                    window.fetchReferences(currentPatientId, activeVisitId);
                } else {
                    console.log('No valid visit ID available for references');
                    // Hide the spinner since no references will be fetched
                    window.hideReferencesSpinner();
                }
            }
        });

        // Update tooltip visibility after selecting a patient
        if (typeof window.updateTooltipVisibility === 'function') {
            window.updateTooltipVisibility();
        } else {
            console.error('updateTooltipVisibility function not found');
        }
    } catch (error) {
        console.error('Error fetching patient history:', error);
        // Removed alert to prevent user interruption
        // alert('Error fetching patient history: ' + error.message);

        // Display message indicating no history
        console.log('No transcripts found for patient:', currentPatientId);
        const notesSection = document.getElementById('notes-section');
        const subjectiveContent = document.getElementById('subjective-content');
        const objectiveContent = document.getElementById('objective-content');
        const assessmentContent = document.getElementById('assessment-content');
        const planContainer = document.getElementById('plan-content-container');
        const insightsAllergyTriggers = document.getElementById('insights-allergy-triggers');
        const insightsCondition = document.getElementById('insights-condition');
        const insightsRecommendations = document.getElementById('insights-recommendations');

        if (subjectiveContent) subjectiveContent.innerHTML = '<p>No patient history available. Submit a transcript to generate SOAP notes.</p>';
        if (objectiveContent) objectiveContent.innerHTML = '<p>Awaiting transcript submission.</p>';
        if (assessmentContent) assessmentContent.innerHTML = '<p>Awaiting transcript submission.</p>';
        if (planContainer) planContainer.innerHTML = '<p>Awaiting transcript submission.</p>';
        if (insightsAllergyTriggers) insightsAllergyTriggers.innerHTML = '<p>N/A</p>';
        if (insightsCondition) insightsCondition.innerHTML = '<p>N/A</p>';
        if (insightsRecommendations) {
            insightsRecommendations.innerHTML = '<p>N/A</p>';
            insightsRecommendations.classList.add('bulleted');
        }

        if (notesSection) {
            notesSection.style.display = 'block';
            // Force UI refresh
            console.log('Forcing UI refresh for no transcripts...');
            notesSection.style.display = 'none'; // Briefly hide
            setTimeout(() => {
                notesSection.style.display = 'block'; // Show again to force re-render
                window.dispatchEvent(new Event('resize'));
            }, 50);
        }
    } finally {
        window.hideContentSpinner();
    }
}

// Delete a patient
async function deletePatient(patientId) {
    if (!confirm('Are you sure you want to delete this patient and all associated transcripts?')) return;
    window.showSpinner();
    try {
        const response = await fetch('/api/delete-patient', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: currentEmail, patientId: patientId, tenantId: currentTenantId })
        });
        if (!response.ok) throw new Error('Failed to delete patient');
        const data = await response.json();
        if (data.success) {
            alert('Patient deleted successfully');
            patients = patients.filter(p => p.patientId !== patientId);
            updatePatientList();
            if (currentPatientId === patientId) {
                currentPatientId = null;
                currentPatient = null;
                activeVisitId = null;
                const patientDetails = document.getElementById('patient-details');
                if (patientDetails) patientDetails.style.display = 'none';
                const notesSection = document.getElementById('notes-section');
                if (notesSection) notesSection.style.display = 'block';
                // Hide the references spinner since the patient is deleted
                window.hideReferencesSpinner();
            }
        } else {
            alert('Failed to delete patient');
        }
    } catch (error) {
        console.error('Error deleting patient:', error);
        alert('Error deleting patient: ' + error.message);
    } finally {
        window.hideSpinner();
    }
}

// Logout function
function logout() {
    console.log('Logging out...');
    // Clear user data from localStorage
    localStorage.removeItem('user');
    // Reset global variables
    currentEmail = null;
    currentTenantId = null;
    currentRole = null;
    currentPatientId = null;
    currentPatient = null;
    activeVisitId = null;
    patients = [];
    // Redirect to login page
    window.location.href = '/login.html';
}

// Expose functions to the global scope
window.fetchPatients = fetchPatients;
window.updatePatientList = updatePatientList;
window.filterPatients = filterPatients;
window.showPatientList = showPatientList;
window.openTemplateSelectionModal = openTemplateSelectionModal;
window.startVisit = startVisit;
window.proceedWithVisit = proceedWithVisit;
window.selectPatient = selectPatient;
window.deletePatient = deletePatient;
window.logout = logout;
