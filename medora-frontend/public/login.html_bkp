<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MedoraMD - Enterprise Medical AI Platform</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://sdk.amazonaws.com/js/aws-sdk-2.1068.0.min.js"></script>
    <script src="https://unpkg.com/amazon-cognito-identity-js@6.3.1/dist/amazon-cognito-identity.min.js"></script>
    <style>
        :root {
            --primary: #0ea5e9;
            --primary-dark: #0369a1;
            --primary-light: #38bdf8;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --background: #000000;
            --surface: #0a0a0a;
            --card: #1a1a1a;
            --text-primary: #ffffff;
            --text-secondary: #a1a1aa;
            --text-muted: #71717a;
            --border: rgba(14, 165, 233, 0.2);
            --glow: 0 0 20px rgba(14, 165, 233, 0.3);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--background);
            color: var(--text-primary);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow-x: hidden;
        }

        /* Animated Background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(14, 165, 233, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(56, 189, 248, 0.05) 0%, transparent 50%);
            animation: backgroundShift 10s ease-in-out infinite;
            pointer-events: none;
            z-index: 0;
        }

        @keyframes backgroundShift {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.8; }
        }

        /* Enterprise Container */
        .enterprise-container {
            background: rgba(10, 10, 10, 0.95);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border);
            border-radius: 24px;
            box-shadow: var(--glow);
            width: 100%;
            max-width: 480px;
            position: relative;
            z-index: 2;
            overflow: hidden;
        }

        /* Header Section */
        .enterprise-header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            padding: 2rem;
            text-align: center;
            position: relative;
        }

        .enterprise-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
            opacity: 0.3;
        }

        .logo-section {
            position: relative;
            z-index: 1;
        }

        .enterprise-logo {
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            backdrop-filter: blur(10px);
        }

        .enterprise-logo i {
            font-size: 2rem;
            color: white;
        }

        .brand-name {
            font-size: 1.75rem;
            font-weight: 900;
            color: white;
            margin-bottom: 0.5rem;
            letter-spacing: -0.02em;
        }

        .brand-tagline {
            color: rgba(255, 255, 255, 0.9);
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Trial Status Banner */
        .trial-status-banner {
            background: linear-gradient(90deg, var(--success) 0%, var(--primary) 100%);
            color: white;
            padding: 1rem;
            text-align: center;
            font-weight: 600;
            font-size: 0.9rem;
            display: none;
        }

        .trial-status-banner.active {
            display: block;
        }

        .trial-countdown {
            font-size: 1.1rem;
            font-weight: 700;
        }

        /* Content Section */
        .enterprise-content {
            padding: 2rem;
        }

        .form-section {
            margin-bottom: 2rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
        }

        .section-subtitle {
            color: var(--text-secondary);
            margin-bottom: 2rem;
            line-height: 1.5;
        }

        /* Enhanced Form Styling */
        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .form-input {
            width: 100%;
            padding: 1rem;
            background: var(--card);
            border: 1px solid var(--border);
            border-radius: 12px;
            color: var(--text-primary);
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
            outline: none;
        }

        .form-input::placeholder {
            color: var(--text-muted);
        }

        /* Specialty Selector */
        .specialty-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 0.75rem;
            margin-top: 0.5rem;
        }

        .specialty-option {
            padding: 1rem;
            background: var(--card);
            border: 1px solid var(--border);
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.85rem;
        }

        .specialty-option:hover {
            border-color: var(--primary);
            background: rgba(14, 165, 233, 0.1);
        }

        .specialty-option.selected {
            border-color: var(--primary);
            background: var(--primary);
            color: white;
        }

        .specialty-option i {
            display: block;
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        /* Enterprise Button */
        .enterprise-btn {
            width: 100%;
            padding: 1rem 1.5rem;
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .enterprise-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: var(--glow);
        }

        .enterprise-btn:disabled {
            background: linear-gradient(135deg, var(--text-muted) 0%, var(--text-muted) 100%);
            cursor: not-allowed;
            transform: none;
        }

        .enterprise-btn .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
        }

        @keyframes spin {
            0% { transform: translateY(-50%) rotate(0deg); }
            100% { transform: translateY(-50%) rotate(360deg); }
        }

        /* Verification Code Input */
        .verification-code {
            display: flex;
            gap: 0.5rem;
            justify-content: center;
            margin: 1.5rem 0;
        }

        .code-digit {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 1.25rem;
            font-weight: 600;
            background: var(--card);
            border: 1px solid var(--border);
            border-radius: 8px;
            color: var(--text-primary);
        }

        .code-digit:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(14, 165, 233, 0.2);
            outline: none;
        }

        /* Messages */
        .message {
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
            font-size: 0.9rem;
            display: none;
        }

        .message.success {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            color: var(--success);
        }

        .message.error {
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            color: var(--danger);
        }

        .message.info {
            background: rgba(14, 165, 233, 0.1);
            border: 1px solid rgba(14, 165, 233, 0.3);
            color: var(--primary);
        }

        /* Enterprise Features */
        .enterprise-features {
            background: var(--card);
            border-radius: 12px;
            padding: 1.5rem;
            margin: 2rem 0;
        }

        .feature-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .feature-item:last-child {
            margin-bottom: 0;
        }

        .feature-icon {
            width: 24px;
            height: 24px;
            background: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 0.75rem;
        }

        /* Trust Indicators */
        .trust-indicators {
            display: flex;
            justify-content: center;
            gap: 2rem;
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid var(--border);
        }

        .trust-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-size: 0.8rem;
            color: var(--text-muted);
        }

        .trust-item i {
            font-size: 1.5rem;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }

        /* Form Navigation */
        .form-nav {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
        }

        .nav-btn {
            background: transparent;
            border: 1px solid var(--border);
            color: var(--text-secondary);
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .nav-btn:hover {
            border-color: var(--primary);
            color: var(--primary);
        }

        /* Responsive Design */
        @media (max-width: 640px) {
            .enterprise-container {
                margin: 1rem;
                max-width: none;
            }

            .enterprise-header,
            .enterprise-content {
                padding: 1.5rem;
            }

            .specialty-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .verification-code {
                gap: 0.25rem;
            }

            .code-digit {
                width: 40px;
                height: 40px;
                font-size: 1rem;
            }
        }

        /* Hidden Forms */
        .form-step {
            display: none;
        }

        .form-step.active {
            display: block;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
    </style>
</head>
<body>
    <div class="enterprise-container">
        <!-- Header -->
        <div class="enterprise-header">
            <div class="logo-section">
                <div class="enterprise-logo">
                    <i class="fas fa-stethoscope"></i>
                </div>
                <div class="brand-name">MedoraMD</div>
                <div class="brand-tagline">Enterprise Medical AI Platform</div>
            </div>
        </div>

        <!-- Trial Status Banner -->
        <div class="trial-status-banner" id="trial-banner">
            <div class="trial-countdown" id="trial-countdown">
                🎉 30-Day Free Trial Active • <span id="days-remaining">30</span> days remaining
            </div>
        </div>

        <!-- Content -->
        <div class="enterprise-content">
            <!-- Step 1: Login -->
            <div class="form-step active" id="login-step">
                <div class="form-section">
                    <h1 class="section-title">Welcome Back</h1>
                    <p class="section-subtitle">Sign in to your enterprise medical AI platform</p>
                    
                    <div class="form-group">
                        <label class="form-label">Email Address</label>
                        <input type="email" class="form-input" id="login-email" placeholder="doctor@hospital.com" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-input" id="login-password" placeholder="Enter your password" required>
                    </div>
                    
                    <button class="enterprise-btn" id="login-btn">
                        <i class="fas fa-sign-in-alt" style="margin-right: 0.5rem;"></i>
                        Sign In Securely
                        <span class="loading-spinner" id="login-spinner"></span>
                    </button>

                    <div class="message" id="login-message"></div>
                </div>

                <div class="enterprise-features">
                    <div class="feature-item">
                        <div class="feature-icon"><i class="fas fa-shield-alt"></i></div>
                        <span>HIPAA-Compliant Security</span>
                    </div>
                    <div class="feature-item">
                        <div class="feature-icon"><i class="fas fa-brain"></i></div>
                        <span>AI-Powered Medical Insights</span>
                    </div>
                    <div class="feature-item">
                        <div class="feature-icon"><i class="fas fa-chart-line"></i></div>
                        <span>Enterprise Analytics Dashboard</span>
                    </div>
                </div>

                <div class="form-nav">
                    <span></span>
                    <button class="nav-btn" onclick="showStep('register-step')">
                        Create Account <i class="fas fa-arrow-right"></i>
                    </button>
                </div>
            </div>

            <!-- Step 2: Registration -->
            <div class="form-step" id="register-step">
                <div class="form-section">
                    <h1 class="section-title">Start Your Enterprise Trial</h1>
                    <p class="section-subtitle">Get 30 days of full access to our medical AI platform</p>
                    
                    <div class="form-group">
                        <label class="form-label">Professional Information</label>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                            <input type="text" class="form-input" id="first-name" placeholder="First Name" required>
                            <input type="text" class="form-input" id="last-name" placeholder="Last Name" required>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Email Address</label>
                        <input type="email" class="form-input" id="register-email" placeholder="doctor@hospital.com" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Create Password</label>
                        <input type="password" class="form-input" id="register-password" placeholder="Create secure password" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Medical Specialty</label>
                        <div class="specialty-grid" id="specialty-grid">
                            <div class="specialty-option" data-specialty="allergist">
                                <i class="fas fa-allergies"></i>
                                Allergy
                            </div>
                            <div class="specialty-option" data-specialty="cardiology">
                                <i class="fas fa-heartbeat"></i>
                                Cardiology
                            </div>
                            <div class="specialty-option" data-specialty="emergency">
                                <i class="fas fa-ambulance"></i>
                                Emergency
                            </div>
                            <div class="specialty-option" data-specialty="family">
                                <i class="fas fa-user-md"></i>
                                Family Med
                            </div>
                            <div class="specialty-option" data-specialty="internal">
                                <i class="fas fa-procedures"></i>
                                Internal Med
                            </div>
                            <div class="specialty-option" data-specialty="other">
                                <i class="fas fa-plus"></i>
                                Other
                            </div>
                        </div>
                    </div>
                    
                    <button class="enterprise-btn" id="register-btn">
                        <i class="fas fa-rocket" style="margin-right: 0.5rem;"></i>
                        Start Free Trial
                        <span class="loading-spinner" id="register-spinner"></span>
                    </button>

                    <div class="message" id="register-message"></div>
                </div>

                <div class="form-nav">
                    <button class="nav-btn" onclick="showStep('login-step')">
                        <i class="fas fa-arrow-left"></i> Back to Login
                    </button>
                    <span></span>
                </div>
            </div>

            <!-- Step 3: Verification -->
            <div class="form-step" id="verification-step">
                <div class="form-section">
                    <h1 class="section-title">Verify Your Account</h1>
                    <p class="section-subtitle">We've sent a 6-digit verification code to your email</p>
                    
                    <div class="verification-code">
                        <input type="text" class="code-digit" maxlength="1" id="code-1">
                        <input type="text" class="code-digit" maxlength="1" id="code-2">
                        <input type="text" class="code-digit" maxlength="1" id="code-3">
                        <input type="text" class="code-digit" maxlength="1" id="code-4">
                        <input type="text" class="code-digit" maxlength="1" id="code-5">
                        <input type="text" class="code-digit" maxlength="1" id="code-6">
                    </div>
                    
                    <button class="enterprise-btn" id="verify-btn">
                        <i class="fas fa-check-circle" style="margin-right: 0.5rem;"></i>
                        Verify & Activate Trial
                        <span class="loading-spinner" id="verify-spinner"></span>
                    </button>

                    <button class="nav-btn" id="resend-btn" style="width: 100%; margin-top: 1rem;">
                        <i class="fas fa-redo"></i> Resend Code
                    </button>

                    <div class="message" id="verify-message"></div>
                </div>

                <div class="form-nav">
                    <button class="nav-btn" onclick="showStep('register-step')">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                    <span></span>
                </div>
            </div>

            <!-- Trust Indicators -->
            <div class="trust-indicators">
                <div class="trust-item">
                    <i class="fas fa-shield-alt"></i>
                    <span>HIPAA Compliant</span>
                </div>
                <div class="trust-item">
                    <i class="fas fa-lock"></i>
                    <span>Enterprise Security</span>
                </div>
                <div class="trust-item">
                    <i class="fas fa-medal"></i>
                    <span>SOC 2 Certified</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let selectedSpecialty = '';
        let currentStep = 'login-step';

        // Cognito Configuration
        const poolData = {
            UserPoolId: 'ap-south-1_6zdLiOolJ',
            ClientId: '4dtmlgehjfoamnlibijn3kt85u'
        };
        AWS.config.region = 'ap-south-1';
        const userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            setupSpecialtySelection();
            setupVerificationCodeInput();
            setupEventListeners();
            checkExistingAuth();
        });

        // Check if user is already authenticated
        function checkExistingAuth() {
            const idToken = localStorage.getItem('idToken');
            if (idToken && !isTokenExpired(idToken)) {
                showTrialStatus();
                // Redirect to dashboard if needed
                setTimeout(() => {
                    window.location.href = 'index.html';
                }, 2000);
            }
        }

        // Show trial status
        function showTrialStatus() {
            const trialBanner = document.getElementById('trial-banner');
            const email = localStorage.getItem('currentEmail');
            
            if (email) {
                // Calculate days remaining (this should come from backend)
                const trialStart = localStorage.getItem('trialStart') || new Date().toISOString().split('T')[0];
                const startDate = new Date(trialStart);
                const endDate = new Date(startDate.getTime() + (30 * 24 * 60 * 60 * 1000));
                const today = new Date();
                const daysRemaining = Math.max(0, Math.ceil((endDate - today) / (24 * 60 * 60 * 1000)));
                
                document.getElementById('days-remaining').textContent = daysRemaining;
                trialBanner.classList.add('active');
                
                if (daysRemaining <= 7) {
                    trialBanner.style.background = 'linear-gradient(90deg, var(--warning) 0%, var(--danger) 100%)';
                    document.getElementById('trial-countdown').innerHTML = 
                        `⚠️ Trial Expires Soon • <span id="days-remaining">${daysRemaining}</span> days remaining`;
                }
            }
        }

        // Step navigation
        function showStep(stepId) {
            document.querySelectorAll('.form-step').forEach(step => {
                step.classList.remove('active');
            });
            document.getElementById(stepId).classList.add('active');
            currentStep = stepId;
        }

        // Specialty selection
        function setupSpecialtySelection() {
            document.querySelectorAll('.specialty-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.specialty-option').forEach(opt => 
                        opt.classList.remove('selected'));
                    this.classList.add('selected');
                    selectedSpecialty = this.dataset.specialty;
                });
            });
        }

        // Verification code input
        function setupVerificationCodeInput() {
            const codeInputs = document.querySelectorAll('.code-digit');
            codeInputs.forEach((input, index) => {
                input.addEventListener('input', function(e) {
                    if (e.target.value.length === 1 && index < codeInputs.length - 1) {
                        codeInputs[index + 1].focus();
                    }
                });
                
                input.addEventListener('keydown', function(e) {
                    if (e.key === 'Backspace' && !e.target.value && index > 0) {
                        codeInputs[index - 1].focus();
                    }
                });
            });
        }

        // Event listeners
        function setupEventListeners() {
            document.getElementById('login-btn').addEventListener('click', handleLogin);
            document.getElementById('register-btn').addEventListener('click', handleRegister);
            document.getElementById('verify-btn').addEventListener('click', handleVerification);
            document.getElementById('resend-btn').addEventListener('click', handleResendCode);
        }

        // Handle login
        async function handleLogin() {
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;

            if (!email || !password) {
                showMessage('login-message', 'Please enter both email and password', 'error');
                return;
            }

            setLoading('login-btn', 'login-spinner', true);
            
            try {
                await signInWithCognito(email, password);
                showMessage('login-message', 'Login successful! Redirecting...', 'success');
                showTrialStatus();
                
                setTimeout(() => {
                    window.location.href = 'index.html';
                }, 2000);
                
            } catch (error) {
                console.error('Login error:', error);
                if (error.code === 'UserNotConfirmedException') {
                    localStorage.setItem('pendingEmail', email);
                    showStep('verification-step');
                    showMessage('verify-message', 'Please verify your account with the code sent to your email', 'info');
                } else {
                    showMessage('login-message', error.message || 'Login failed', 'error');
                }
            } finally {
                setLoading('login-btn', 'login-spinner', false);
            }
        }

        // Handle registration
        async function handleRegister() {
            const firstName = document.getElementById('first-name').value;
            const lastName = document.getElementById('last-name').value;
            const email = document.getElementById('register-email').value;
            const password = document.getElementById('register-password').value;

            if (!firstName || !lastName || !email || !password || !selectedSpecialty) {
                showMessage('register-message', 'Please fill in all fields and select a specialty', 'error');
                return;
            }

            if (password.length < 8) {
                showMessage('register-message', 'Password must be at least 8 characters', 'error');
                return;
            }

            setLoading('register-btn', 'register-spinner', true);
            
            try {
                await registerWithCognito({
                    firstName,
                    lastName,
                    email,
                    password,
                    specialty: selectedSpecialty
                });
                
                localStorage.setItem('pendingEmail', email);
                showStep('verification-step');
                showMessage('verify-message', 'Registration successful! Please check your email for verification code', 'success');
                
                // Send welcome email
                await sendWelcomeEmail(email, firstName, lastName);
                
            } catch (error) {
                console.error('Registration error:', error);
                showMessage('register-message', error.message || 'Registration failed', 'error');
            } finally {
                setLoading('register-btn', 'register-spinner', false);
            }
        }

        // Handle verification
        async function handleVerification() {
            const code = Array.from(document.querySelectorAll('.code-digit'))
                .map(input => input.value)
                .join('');
            
            if (code.length !== 6) {
                showMessage('verify-message', 'Please enter the complete 6-digit code', 'error');
                return;
            }

            const email = localStorage.getItem('pendingEmail');
            if (!email) {
                showMessage('verify-message', 'Email not found. Please try registering again', 'error');
                return;
            }

            setLoading('verify-btn', 'verify-spinner', true);
            
            try {
                await confirmSignUp(email, code);
                showMessage('verify-message', 'Account verified successfully!', 'success');
                
                // Send activation email
                await sendActivationEmail(email);
                
                setTimeout(() => {
                    showStep('login-step');
                    document.getElementById('login-email').value = email;
                    showMessage('login-message', 'Account verified! Please log in', 'success');
                }, 2000);
                
            } catch (error) {
                console.error('Verification error:', error);
                showMessage('verify-message', error.message || 'Verification failed', 'error');
            } finally {
                setLoading('verify-btn', 'verify-spinner', false);
            }
        }

        // Handle resend code
        async function handleResendCode() {
            const email = localStorage.getItem('pendingEmail');
            if (!email) {
                showMessage('verify-message', 'Email not found', 'error');
                return;
            }

            try {
                await resendConfirmationCode(email);
                showMessage('verify-message', 'Verification code resent!', 'success');
            } catch (error) {
                showMessage('verify-message', error.message || 'Failed to resend code', 'error');
            }
        }

        // Cognito functions (similar to your existing ones but enhanced)
        async function signInWithCognito(email, password) {
            return new Promise((resolve, reject) => {
                const authenticationData = {
                    Username: email,
                    Password: password
                };

                const authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);
                const userData = { Username: email, Pool: userPool };
                const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

                cognitoUser.authenticateUser(authenticationDetails, {
                    onSuccess: (result) => {
                        // Store tokens
                        localStorage.setItem('idToken', result.getIdToken().getJwtToken());
                        localStorage.setItem('accessToken', result.getAccessToken().getJwtToken());
                        localStorage.setItem('refreshToken', result.getRefreshToken().getToken());
                        localStorage.setItem('currentEmail', email);
                        
                        resolve(result);
                    },
                    onFailure: reject
                });
            });
        }

        async function registerWithCognito(userData) {
            return new Promise((resolve, reject) => {
                const { email, password, firstName, lastName, specialty } = userData;
                
                const attributeList = [
                    new AmazonCognitoIdentity.CognitoUserAttribute({
                        Name: 'email',
                        Value: email
                    }),
                    new AmazonCognitoIdentity.CognitoUserAttribute({
                        Name: 'given_name',
                        Value: firstName
                    }),
                    new AmazonCognitoIdentity.CognitoUserAttribute({
                        Name: 'family_name',
                        Value: lastName
                    }),
                    new AmazonCognitoIdentity.CognitoUserAttribute({
                        Name: 'custom:specialty',
                        Value: specialty
                    })
                ];

                userPool.signUp(email, password, attributeList, null, (err, result) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve(result);
                });
            });
        }

        async function confirmSignUp(email, confirmationCode) {
            return new Promise((resolve, reject) => {
                const userData = { Username: email, Pool: userPool };
                const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

                cognitoUser.confirmRegistration(confirmationCode, true, (err, result) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve(result);
                });
            });
        }

        async function resendConfirmationCode(email) {
            return new Promise((resolve, reject) => {
                const userData = { Username: email, Pool: userPool };
                const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

                cognitoUser.resendConfirmationCode((err, result) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve(result);
                });
            });
        }

        // Email functions (these would call your backend)
        async function sendWelcomeEmail(email, firstName, lastName) {
            try {
                await fetch('/api/send-welcome-email', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, firstName, lastName })
                });
            } catch (error) {
                console.error('Failed to send welcome email:', error);
            }
        }

        async function sendActivationEmail(email) {
            try {
                await fetch('/api/send-activation-email', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
                });
            } catch (error) {
                console.error('Failed to send activation email:', error);
            }
        }

        // Utility functions
        function setLoading(btnId, spinnerId, isLoading) {
            const button = document.getElementById(btnId);
            const spinner = document.getElementById(spinnerId);
            
            if (button && spinner) {
                button.disabled = isLoading;
                spinner.style.display = isLoading ? 'inline-block' : 'none';
            }
        }

        function showMessage(elementId, message, type) {
            const element = document.getElementById(elementId);
            if (element) {
                element.textContent = message;
                element.className = `message ${type}`;
                element.style.display = 'block';
                
                if (type === 'success') {
                    setTimeout(() => {
                        element.style.display = 'none';
                    }, 5000);
                }
            }
        }

        function isTokenExpired(token) {
            try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                return Date.now() >= payload.exp * 1000;
            } catch {
                return true;
            }
        }
    </script>
</body>
</html>
